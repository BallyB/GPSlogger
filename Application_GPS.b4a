Build1=Default,test.adrien
File1=VuePrincipale.bal
FileGroup1=Default Group
Group=Default Group
IconFile=
Library1=core
Library2=runtimepermissions
Library3=gps
Library4=phone
Library5=googlemaps
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="5" android:targetSdkVersion="23"/>~\n~<uses-feature android:name="android.hardware.location.gps"/>~\n~~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~AddPermission(android.permission.WRITE_EXTERNAL_STORAGE)~\n~AddPermission(android.permission.READ_EXTERNAL_STORAGE)~\n~AddPermission(android.permission.ACCESS_FINE_LOCATION)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~CreateResourceFromFile(Macro, FirebaseAnalytics.GooglePlayBase)~\n~AddApplicationText(<meta-data android:name="com.google.android.geo.API_KEY" android:value="AIzaSyCxGuZiUo6IgqbuIySKqT_pLyZa7mNN8IU"/>)~\n~'End of default text.~\n~
Module1=Starter
NumberOfFiles=1
NumberOfLibraries=5
NumberOfModules=1
Version=8
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: GPS logger
	#VersionCode: 1
	#VersionName: 
	#IncludeTitle: True
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
	#AdditionalJar: com.google.android.gms:play-services-maps
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
#BridgeLogger: true
Sub Process_Globals
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	'Dim myNumber As Int
	Private shared As String
	Dim Awake As PhoneWakeState
	'
	'Private userlocation As Location
	
	
	Private Lati As Label
	Private Longi As Label
	Private Satellit As Label
	Private Speed As Label
	Private Altitude As Label
	Private Dist As Label
	
	Private MapFragment1 As MapFragment
	Private gmap As GoogleMap
	
	
	'Private mapPanel As Panel
	Private Reset As Button
	Private Save As Button
'	Private Panel1 As Panel
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Log("DANS ActivityCreate")
	'Do not forget to load the layout file created with the visual designer. For example:
	'Activity.LoadLayout("Layout1")
	'shared = rp.GetSafeDirDefaultExternal("test")
	'rp.CheckAndRequest(rp.PERMISSION_READ_EXTERNAL_STORAGE)
	'rp.CheckAndRequest(rp.PERMISSION_WRITE_EXTERNAL_STORAGE)
	'rp.CheckAndRequest(rp.PERMISSION_ACCESS_FINE_LOCATION)
	Activity.LoadLayout("VuePrincipale")
	If MapFragment1.IsGooglePlayServicesAvailable = False Then
		ToastMessageShow("Google Play services not available.", True)
	End If
	'If FirstTime Then
	'	If Starter.gps.GPSEnabled=False Then
	'		ToastMessageShow("Please enable your device's GPS capabilities", True)
	'		StartActivity(Starter.gps.LocationSettingsIntent)
	'	gps.Initialize("gpsClient")
			'	userlocation.Initialize
	'	Else
			'Starter.gps.Start(0, 0)
		
	'		Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_ACCESS_FINE_LOCATION)
	'		Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	'		If Result Then CallSubDelayed(Starter, "StartGPS")
			'ProgressDialogShow("Waiting for GPS location")
	'	End If
	'End If
	
'	Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
'	If Result Then
'		gps.Initialize
'		Log(gps
'	End If
	
	
	'List1.Initialize
	
End Sub
	
Sub SaveStringExample
	Log("DANS SaveStringExample")
	File.WriteList(shared, "PositionsGPS.txt", Starter.List1)
End Sub

Sub Activity_Resume
	Log("DANS Resume ")
	
	Log("DANS Resume après map")
	If Starter.gps.GPSEnabled = False Then
		ToastMessageShow("Please enable the GPS device.", True)
		'Activity.GetStartingIntent
		StartActivity(Starter.gps.LocationSettingsIntent) 'Will open the relevant settings screen.
	Else
		
		Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_ACCESS_FINE_LOCATION)
		Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
		If Result Then CallSubDelayed(Starter, "StartGPS")
	End If
	
	
	
End Sub


Public Sub GpsStatus (Satellites As List)
	Log("DANS GPS_Status")
	'Starter.gps.Initialize
	Dim sb As StringBuilder
	sb.Initialize
	'sb.Append("Satellites: ")
	For i = 0 To Satellites.Size - 1
		Dim Satellite As GPSSatellite = Satellites.Get(i)
		sb.Append(CRLF).Append(Satellite.Prn).Append($" $1.2{Satellite.Snr}"$).Append(" ").Append(Satellite.UsedInFix)
		sb.Append(" ").Append($" $1.2{Satellite.Azimuth}"$).Append($" $1.2{Satellite.Elevation}"$)
	Next
	Satellit.Text = sb.ToString
End Sub


Public Sub GPS_LocationChanged (Location1 As Location,Distance As Double)
	Log("DANS LocationChanged")
	Awake.KeepAlive(True)
	'Dim sbb As StringBuilder
	'Dim unixTime As Long = currentTimeMillis() / 1000L;
	Altitude.Text = Location1.Altitude
	
	'Distance.Text = Loc
	Lati.Text = Round(Location1.Latitude*11930464.7111)
	Longi.Text = Round(Location1.Longitude*11930464.7111)
	Speed.Text = $"$1.1{Location1.Speed*3.6} km/h "$
	'Timestamp de Garmin currenttimestamp - 631065600
	'currenttimestamp - 631065600  : Log(Round(DateTime.Now/1000)-631065600)
	
	'End If
	Dist.Text = Distance
	
	
	
	
	Awake.ReleaseKeepAlive
End Sub
'Sub Activity_PermissionResult (Permission As String, Result As Boolean)
	'If Permission = rp.PERMISSION_ACCESS_FINE_LOCATION Then
'		gps. = Result
'	End If
'End Sub
Sub Activity_Pause (UserClosed As Boolean)
	Log("DANS Pause")
	If UserClosed Then
		Awake.ReleaseKeepAlive
	End If
	'CallSubDelayed(Starter, "StopGPS")
End Sub
'Sub GPS_UserEnabled (Enabled As Boolean)
'	ToastMessageShow("GPS device enabled = " & Enabled, True)
'End Sub


Sub MapFragment1_Ready
	Log("DANS Map_ready")
	gmap = MapFragment1.GetMap
	'If gmap.IsInitialized = False Then
	'	ToastMessageShow("Error initializing map.", True)
	'Else
		gmap.MyLocationEnabled = True
	'End If
	'Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_ACCESS_FINE_LOCATION)
	'Wait For Activity_PermissionResult (Permission As String, Result As Boolean)
	
	
	'Result
		'Dim m1 As Marker = gmap.AddMarker(10,30,"test")
		'm1.Snippet = "This is the snippet"
End Sub



Sub Save_Click
	Log("DANS SaveClick")
	If File.ExternalWritable = False Then
		Msgbox("No rights to write"," ")
		Return
	Else
		shared = Starter.rp.GetSafeDirDefaultExternal("test")
		Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_READ_EXTERNAL_STORAGE)
		Starter.rp.CheckAndRequest(Starter.rp.PERMISSION_WRITE_EXTERNAL_STORAGE)
		Wait For Activity_PermissionResult(Permission As String, Result As Boolean)
		If Result Then SaveStringExample
	End If
'	MapFragment1.Initialize("Map",Activity)
	'Panel1.Initialize("")
'	Wait For MapFragment1_Ready
	'If gmap.IsInitialized = False Then
	'	gmap = MapFragment1.GetMap
	'	gmap.MyLocationEnabled = True
	Dim pl As Polyline = gmap.AddPolyline
	pl.Points = Starter.listLocations
	pl.Color=Colors.Blue
	pl.ZIndex=3
	'Else
	'	Dim pl As Polyline = gmap.AddPolyline
	'	pl.Points = Starter.listLocations
	'	pl.Color=Colors.Blue
	'	pl.ZIndex=3
	'End If
	
	Save.Enabled = False
	'If MapFragment1.IsGooglePlayServicesAvailable = False Then
	'	ToastMessageShow("Google Play services not available.", True)
'	Else
	'	MapFragment1.Initialize("MapFragment1", mapPanel)
'	End If
End Sub

Sub Reset_LongClick
	Log("DANS Reset")
	Starter.Distance = 0
	Dist.Text = 0
	Starter.cpt = 0
	Save.Enabled = True
	Starter.listLocations.Clear
	Starter.List1.Clear
End Sub